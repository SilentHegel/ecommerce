{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { configureStore } from '@reduxjs/toolkit';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { productListReducer, productDetailsReducer } from './reducers/productReducers';\nimport { cartReducer } from './reducers/cartReducers';\nimport { userLoginReducer, userRegisterReducer, userDetailsReducer, userUpdateProfileReducer } from './reducers/userReducers';\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  cart: cartReducer,\n  userLogin: userLoginReducer,\n  userRegister: userRegisterReducer,\n  userDetails: userDetailsReducer,\n  userUpdateProfile: userUpdateProfileReducer\n});\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : [];\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null;\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ? JSON.parse(localStorage.getItem('shippingAddress')) : {};\nconst initialSate = {\n  cart: {\n    cartItems: cartItemsFromStorage,\n    shippingAddress: shippingAddressFromStorage\n  },\n  userLogin: {\n    userInfo: userInfoFromStorage\n  }\n};\nconst middleware = [thunk];\nconst store = createStore(reducer, initialSate, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["/Users/kevingarcia/Desktop/ecommerce/frontend/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","configureStore","thunk","composeWithDevTools","productListReducer","productDetailsReducer","cartReducer","userLoginReducer","userRegisterReducer","userDetailsReducer","userUpdateProfileReducer","reducer","productList","productDetails","cart","userLogin","userRegister","userDetails","userUpdateProfile","cartItemsFromStorage","localStorage","getItem","JSON","parse","userInfoFromStorage","shippingAddressFromStorage","initialSate","cartItems","shippingAddress","userInfo","middleware","store"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,eAArB,EAAsCC,eAAtC,QAA4D,OAA5D;AACA,SAAQC,cAAR,QAA6B,kBAA7B;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAAQC,mBAAR,QAAkC,0BAAlC;AACA,SAAQC,kBAAR,EAA2BC,qBAA3B,QAAuD,4BAAvD;AACA,SAAQC,WAAR,QAA0B,yBAA1B;AACA,SAAQC,gBAAR,EAA0BC,mBAA1B,EAA+CC,kBAA/C,EAAmEC,wBAAnE,QAAkG,yBAAlG;AAGA,MAAMC,OAAO,GAAGZ,eAAe,CAAC;AAC5Ba,EAAAA,WAAW,EAAER,kBADe;AAE5BS,EAAAA,cAAc,EAAER,qBAFY;AAG5BS,EAAAA,IAAI,EAAER,WAHsB;AAI5BS,EAAAA,SAAS,EAAER,gBAJiB;AAK5BS,EAAAA,YAAY,EAAER,mBALc;AAM5BS,EAAAA,WAAW,EAAER,kBANe;AAO5BS,EAAAA,iBAAiB,EAAER;AAPS,CAAD,CAA/B;AAWA,MAAMS,oBAAoB,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,IACrBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CADqB,GAC2B,EADxD;AAGA,MAAMG,mBAAmB,GAAGJ,YAAY,CAACC,OAAb,CAAqB,UAArB,IACpBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CADoB,GAC2B,IADvD;AAGA,MAAMI,0BAA0B,GAAGL,YAAY,CAACC,OAAb,CAAqB,iBAArB,IAC3BC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAX,CAD2B,GAC2B,EAD9D;AAGA,MAAMK,WAAW,GAAG;AAChBZ,EAAAA,IAAI,EAAE;AACFa,IAAAA,SAAS,EAAER,oBADT;AAEFS,IAAAA,eAAe,EAAEH;AAFf,GADU;AAKhBV,EAAAA,SAAS,EAAE;AAACc,IAAAA,QAAQ,EAAEL;AAAX;AALK,CAApB;AAQA,MAAMM,UAAU,GAAG,CAAC5B,KAAD,CAAnB;AAEA,MAAM6B,KAAK,GAAGjC,WAAW,CAACa,OAAD,EAAUe,WAAV,EAAuBvB,mBAAmB,CAACH,eAAe,CAAC,GAAG8B,UAAJ,CAAhB,CAA1C,CAAzB;AAEA,eAAeC,KAAf","sourcesContent":["import {createStore, combineReducers, applyMiddleware} from 'redux'\nimport {configureStore} from '@reduxjs/toolkit'\nimport thunk from 'redux-thunk'\nimport {composeWithDevTools} from 'redux-devtools-extension'\nimport {productListReducer,productDetailsReducer} from './reducers/productReducers'\nimport {cartReducer} from './reducers/cartReducers'\nimport {userLoginReducer, userRegisterReducer, userDetailsReducer, userUpdateProfileReducer} from './reducers/userReducers'\n\n\nconst reducer = combineReducers({\n    productList: productListReducer,\n    productDetails: productDetailsReducer,\n    cart: cartReducer,\n    userLogin: userLoginReducer,\n    userRegister: userRegisterReducer,\n    userDetails: userDetailsReducer,\n    userUpdateProfile: userUpdateProfileReducer,\n\n})\n\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ?\n        JSON.parse(localStorage.getItem('cartItems')) : []\n\nconst userInfoFromStorage = localStorage.getItem('userInfo') ?\n        JSON.parse(localStorage.getItem('userInfo')) : null\n\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ?\n        JSON.parse(localStorage.getItem('shippingAddress')) : {}\n\nconst initialSate = {\n    cart: {\n        cartItems: cartItemsFromStorage,\n        shippingAddress :shippingAddressFromStorage,\n    },\n    userLogin: {userInfo: userInfoFromStorage}\n}\n\nconst middleware = [thunk]\n\nconst store = createStore(reducer, initialSate, composeWithDevTools(applyMiddleware(...middleware)))\n\nexport default store"]},"metadata":{},"sourceType":"module"}